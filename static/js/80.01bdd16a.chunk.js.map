{"version":3,"file":"static/js/80.01bdd16a.chunk.js","mappings":"oTAGaA,E,MAAWC,GAAAA,OAAa,CACnCC,iBAAiB,EACjBC,QAASC,EAAAA,ICDEC,EAAa,SACTC,GACb,OAAON,EAASO,IAAT,UAAgBD,IAAQE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAFtCL,EAAa,WAKtB,OAAOL,EAASO,IAAT,UAAgCI,EAAAA,IAAiBH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,S,SCG/DE,EAAc,WACzB,IAAQN,GAASO,EAAAA,EAAAA,MAATP,KACFQ,GAAWC,EAAAA,EAAAA,MACjB,GAA8BC,EAAAA,EAAAA,UAAiC,MAA/D,eAAOC,EAAP,KAAgBC,EAAhB,KAcA,OARAC,EAAAA,EAAAA,YAAU,WACJb,GACFD,ECrByB,SAACC,GAAD,gBAA6BF,EAAAA,EAA7B,gBAA6CE,GDsBpDc,CAAgBd,IAC/BE,MAAK,SAACE,GAAD,OAA2BQ,EAAWR,EAAK,SAEpD,CAACJ,KAGF,iCACE,UAAC,KAAD,CAAQe,QAdS,WACnBP,GAAU,IAaR,WACE,SAAC,MAAD,IADF,YAGA,qCAAaR,KACZW,IAAW,SAAC,MAAD,UAAUA,Q,UE7BfK,EAA6B,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACtD,GAAkDR,EAAAA,EAAAA,UAAyBO,GAA3E,eAAOE,EAAP,KAA0BC,EAA1B,KACA,GAAsCV,EAAAA,EAAAA,UAAiB,GAAvD,eAAOW,EAAP,KAAoBC,EAApB,KAGMC,EAFmB,GAEAF,EACnBG,EAAoBD,EAHD,GAInBE,EAAiBN,EAAkBO,MAAMF,EAAmBD,GAC5DI,EAAoBC,KAAKC,KAAKV,EAAkBW,OAL7B,IAmBnBC,EAAe,SAACC,EAAgBC,GACpC,IAAI7B,GAAI,OAAOa,GACXgB,IACF7B,EAAOA,EAAK8B,QAAO,SAAAvB,GAAO,OAAIA,EAAQsB,OAAOE,SAASF,OAEpDD,IACF5B,EAAOA,EAAK8B,QAAO,SAAAvB,GAAO,OACxBA,EAAQX,KAAKoC,cAAcD,SAASH,EAAOI,mBAG/ChB,EAAqBhB,IAavB,OAVAS,EAAAA,EAAAA,YAAU,WACHI,EAAUa,QACb/B,IAA8BG,MAAK,SAAAE,GAAI,OAAIc,EAAad,QAEzD,KAEHS,EAAAA,EAAAA,YAAU,WACRkB,EAAa,GAAI,MAChB,CAACd,KAGF,iCACE,SAAC,KAAD,CAAUoB,SAAUN,KACpB,SAAC,KAAD,UACGN,EAAea,KAAI,SAAA3B,GAClB,IAAM4B,EAA+B,CACnCC,IAAK7B,EAAQ8B,MAAMC,IACnB1C,KAAMW,EAAQX,KACd2C,KAAM,CACJ,CAAEC,MAAO,aAAcC,YAAalC,EAAQmC,WAAWC,kBACvD,CAAEH,MAAO,SAAUC,YAAalC,EAAQsB,QACxC,CAAEW,MAAO,UAAWC,YAAalC,EAAQqC,WAG7C,OAAO,SAAC,MAAD,UAA6BT,GAAlB5B,EAAQX,WAG7BmB,EAAkBW,QAAU,KAAM,SAAC,KAAD,IAClCX,EAAkBW,QAAU,KAC3B,SAAC,KAAD,CACET,YAAaA,EACbM,kBAAmBA,EACnBsB,SAzDS,SAACC,GAChB5B,EAAe4B,IAyDTC,SAtDS,WACf7B,GAAe,SAAA8B,GAAI,OAAKA,IAASzB,EAAoByB,EAAOA,EAAO,MAsD7DC,SAnDS,WACf/B,GAAe,SAAA8B,GAAI,OAAc,IAATA,EAAaA,EAAOA,EAAO,YCvB1CE,EAAmB,kBAAM","sources":["api/instance.ts","api/countryApi.ts","pages/Details/Details.tsx","utils/searchByCountry/searchByCountry.ts","pages/HomePage/HomePage.tsx","pages/NotFoundPage/NotFoundPage.tsx"],"sourcesContent":["import axios from 'axios';\nimport { BASE_URL } from 'config';\n\nexport const instance = axios.create({\n  withCredentials: true,\n  baseURL: BASE_URL,\n});\n","import { ResponseType } from 'App/types';\nimport { ALL_COUNTRIES } from 'config';\nimport { instance } from './instance';\n\nexport const countryApi = {\n  getCountryById(name: string) {\n    return instance.get(`${name}`).then(res => res.data);\n  },\n  getCountriesList() {\n    return instance.get<ResponseType[]>(`${ALL_COUNTRIES}`).then(res => res.data);\n  },\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { IoArrowBack } from 'react-icons/io5';\nimport { Nullable } from 'types';\nimport { Info } from 'components';\nimport { ResponseType } from 'App/types';\nimport { Button } from 'layout';\nimport { searchByCountry } from 'utils';\nimport { countryApi } from 'api';\nimport { NameType } from './types';\nimport { ResponseCountry } from 'pages/HomePage/types';\n\nexport const Details: FC = () => {\n  const { name } = useParams<NameType>();\n  const navigate = useNavigate();\n  const [country, setCountry] = useState<Nullable<ResponseType>>(null);\n\n  const handleGoBack = (): void => {\n    navigate(-1);\n  };\n\n  useEffect(() => {\n    if (name) {\n      countryApi\n        .getCountryById(searchByCountry(name))\n        .then((data: ResponseCountry) => setCountry(data[0]));\n    }\n  }, [name]);\n\n  return (\n    <>\n      <Button onClick={handleGoBack}>\n        <IoArrowBack /> Back\n      </Button>\n      <h1>Details {name}</h1>\n      {country && <Info {...country} />}\n    </>\n  );\n};\n","import { BASE_URL } from 'config';\n\nexport const searchByCountry = (name: string): string => `${BASE_URL}name/${name}`;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Card, Controls, List, GoUp, Pagination } from 'components';\nimport { ResponseType } from 'App/types';\nimport { CountryInfoType, HomePageType } from './types';\nimport { countryApi } from 'api';\n\nexport const HomePage: FC<HomePageType> = ({ countries, setCountries }) => {\n  const [filteredCountries, setFilteredCountries] = useState<ResponseType[]>(countries);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const pageSize: number = 24;\n\n  const lastCountryIndex = currentPage * pageSize;\n  const firstCountryIndex = lastCountryIndex - pageSize;\n  const currentCountry = filteredCountries.slice(firstCountryIndex, lastCountryIndex);\n  const numberOfCountries = Math.ceil(filteredCountries.length / pageSize);\n\n  const paginate = (page: number): void => {\n    setCurrentPage(page);\n  };\n\n  const nextPage = (): void => {\n    setCurrentPage(prev => (prev === numberOfCountries ? prev : prev + 1));\n  };\n\n  const prevPage = (): void => {\n    setCurrentPage(prev => (prev === 1 ? prev : prev - 1));\n  };\n\n  const handleSearch = (search: string, region: string): void => {\n    let data = [...countries];\n    if (region) {\n      data = data.filter(country => country.region.includes(region));\n    }\n    if (search) {\n      data = data.filter(country =>\n        country.name.toLowerCase().includes(search.toLowerCase()),\n      );\n    }\n    setFilteredCountries(data);\n  };\n\n  useEffect(() => {\n    if (!countries.length) {\n      countryApi.getCountriesList().then(data => setCountries(data));\n    }\n  }, []);\n\n  useEffect(() => {\n    handleSearch('', '');\n  }, [countries]);\n\n  return (\n    <>\n      <Controls onSearch={handleSearch} />\n      <List>\n        {currentCountry.map(country => {\n          const countryInfo: CountryInfoType = {\n            img: country.flags.png,\n            name: country.name,\n            info: [\n              { title: 'Population', description: country.population.toLocaleString() },\n              { title: 'Region', description: country.region },\n              { title: 'Capital', description: country.capital },\n            ],\n          };\n          return <Card key={country.name} {...countryInfo} />;\n        })}\n      </List>\n      {filteredCountries.length >= 12 && <GoUp />}\n      {filteredCountries.length >= 20 && (\n        <Pagination\n          currentPage={currentPage}\n          numberOfCountries={numberOfCountries}\n          paginate={paginate}\n          nextPage={nextPage}\n          prevPage={prevPage}\n        />\n      )}\n    </>\n  );\n};\n","import React, { FC } from 'react';\n\nexport const NotFoundPage: FC = () => <div>NotFoundPage</div>;\n"],"names":["instance","axios","withCredentials","baseURL","BASE_URL","countryApi","name","get","then","res","data","ALL_COUNTRIES","Details","useParams","navigate","useNavigate","useState","country","setCountry","useEffect","searchByCountry","onClick","HomePage","countries","setCountries","filteredCountries","setFilteredCountries","currentPage","setCurrentPage","lastCountryIndex","firstCountryIndex","currentCountry","slice","numberOfCountries","Math","ceil","length","handleSearch","search","region","filter","includes","toLowerCase","onSearch","map","countryInfo","img","flags","png","info","title","description","population","toLocaleString","capital","paginate","page","nextPage","prev","prevPage","NotFoundPage"],"sourceRoot":""}